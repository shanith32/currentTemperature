{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","weather","temperature","city","handleChange","bind","assertThisInitialized","handleSubmit","console","log","main","temp","concat","setState","_this2","axios","method","url","then","response","data","getTemperature","catch","error","alert","event","target","value","getWeather","preventDefault","react_default","a","createElement","className","role","aria-label","onSubmit","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAgFeA,cA3Eb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,QAAS,KACTC,YAAa,KACbC,KAAM,IAERV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACpBA,EAAKc,aAAed,EAAKc,aAAaF,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KARRA,gFAYZ,GAA2B,OAAvBG,KAAKI,MAAMC,QAAkB,KACvBA,EAAYL,KAAKI,MAAjBC,QACRO,QAAQC,IAAI,gBAAiBR,EAAQS,KAAKC,MAC1C,IAAMT,EAAW,GAAAU,OAAMX,EAAQS,KAAKC,KAAnB,UACjBf,KAAKiB,SAAS,CAAEX,YAAaA,wCAItBC,GAAM,IAAAW,EAAAlB,KACfmB,IAAM,CACJC,OAAQ,MACRC,IAAG,qDAAAL,OAAuDT,EAAvD,sEAEFe,KAAK,SAAAC,GACJX,QAAQC,IAAI,YAAaU,EAASC,MAClCN,EAAKD,SAAS,CAAEZ,QAASkB,EAASC,OAClCN,EAAKO,mBAENC,MAAM,SAAAC,GACLf,QAAQC,IAAI,cAAec,GAC3BT,EAAKD,SAAS,CAAEX,YAAa,OAC7BsB,MAAM,2DAICC,GACX7B,KAAKiB,SAAS,CAAEV,KAAMsB,EAAMC,OAAOC,6CAGxBF,GACXjB,QAAQC,IAAI,SAAUb,KAAKI,MAAMG,MACjCP,KAAKgC,WAAWhC,KAAKI,MAAMG,MAC3BsB,EAAMI,kDAIN,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,mCAC0B,IACxBF,EAAAC,EAAAC,cAAA,QAAME,KAAK,MAAMC,aAAW,eAA5B,uBAIFL,EAAAC,EAAAC,cAAA,QAAMI,SAAUxC,KAAKW,cACnBuB,EAAAC,EAAAC,cAAA,0BAEEF,EAAAC,EAAAC,cAAA,SACEK,KAAK,OACLV,MAAO/B,KAAKI,MAAMG,KAClBmC,SAAU1C,KAAKQ,gBAGnB0B,EAAAC,EAAAC,cAAA,SAAOK,KAAK,SAASV,MAAM,YAE7BG,EAAAC,EAAAC,cAAA,UAAKpC,KAAKI,MAAME,sBArERqC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.a26068bf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      weather: null,\r\n      temperature: null,\r\n      city: \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  getTemperature() {\r\n    if (this.state.weather !== null) {\r\n      const { weather } = this.state;\r\n      console.log(\"Temperature: \", weather.main.temp);\r\n      const temperature = `${weather.main.temp} ¬∞F`;\r\n      this.setState({ temperature: temperature });\r\n    }\r\n  }\r\n\r\n  getWeather(city) {\r\n    axios({\r\n      method: \"get\",\r\n      url: `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&mode=json&appid=e7f2d9ee3634d4d1e2190332c802601d`\r\n    })\r\n      .then(response => {\r\n        console.log(\"Weather: \", response.data);\r\n        this.setState({ weather: response.data });\r\n        this.getTemperature();\r\n      })\r\n      .catch(error => {\r\n        console.log(\"API ERROR: \", error);\r\n        this.setState({ temperature: null });\r\n        alert(\"Wrong city name!\");\r\n      });\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ city: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    console.log(\"City: \", this.state.city);\r\n    this.getWeather(this.state.city);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <p>\r\n            Get Current Temperature{\" \"}\r\n            <span role=\"img\" aria-label=\"Thermometer\">\r\n              üå°Ô∏è\r\n            </span>\r\n          </p>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n              City Name?\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.city}\r\n                onChange={this.handleChange}\r\n              />\r\n            </label>\r\n            <input type=\"submit\" value=\"Submit\" />\r\n          </form>\r\n          <h1>{this.state.temperature}</h1>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}